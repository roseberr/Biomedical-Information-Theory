# -*- coding: utf-8 -*-
"""kmc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECAsYR-UAphjipiu7APBKxhhPC37AGl-
"""

import numpy as np
import os

ribo_data=np.loadtxt("/content/ribo-data.txt", delimiter="\t",dtype=str) #데이터를 받아올 경로 설정 
ribo_data=ribo_data[:,:79]
ribo_data=np.array(ribo_data,dtype='f')#ribo_data변수에 data 저장 

nonribo_data=np.loadtxt("/content/nonribo-data.txt", delimiter="\t",dtype=str) #데이터를 받아올 경로 설정
nonribo_data=nonribo_data[:,:79]
nonribo_data=np.array(nonribo_data,dtype='f')#nonribo_data변수에 data 저장

print("ribo_data.shape: ",ribo_data.shape)
print("nonribo_data.shape: ",nonribo_data.shape)

sum_data=np.concatenate((ribo_data,nonribo_data),axis=0)
print("ribo_data와 nonribo_data의 data를 sum_data로 합치기 진행.. ")
print("sum_data.shape: ",sum_data.shape)

# sum_target에 index값이 0이면 ribo data 1이면 nonribo data 
print()
sum_target=np.zeros((2467,1))
print("sum_data의 79 index에 target 값 넣기...   ")
print("sum_target에 index값이 0이면 ribo data 1이면 nonribo data 이다 ")

for i in range(121,2467):
    sum_target[i][0]=1

print("sum_target.shape:",sum_target.shape)

sum_data=np.hstack([sum_data,sum_target])

print("target 행렬 더한후 sum_data.shape:",sum_data.shape)

sum_index=np.zeros((2467,1))

for i in range(0,2467):
    sum_index[i][0]=i

sum_data=np.hstack([sum_data,sum_index])

print("sum_data.shape:",sum_data.shape)
print(sum_data[20][80])
print(sum_data[20][79])
print(sum_data[20])

# k-means  구현 

def distance(p1, p2):# 두 행렬사이의 거리 구하기 
    return np.sqrt(np.sum(np.power((p2-p1),2)))

print("첫번쨰 data와 두번쨰 data사이의 거리 구해보기..",distance(sum_data[0],sum_data[1]))

def select_each_ribo_nonribo(k=2):  #각각 data에서 nonribo data와 ribo data 하나씩 뽑는 함수 
    centroids=np.vstack([sum_data[0],sum_data[121]])
    #print(centroids)
    #print(sum_data[20])
    return centroids

def random_selection(k):#random하게 데이터 k개 뽑는 코드 
   
    np.random.shuffle(sum_data)
    centroids=sum_data[0:k][:]
    
    return centroids

from copy import deepcopy

def k_means_select_each(): #nonribo와 ribo data를 하나씩 뽑았을때의 k means 실행 
    #k=int(input("K값을 입력하세요 : "))
    k=2  
    centroids=select_each_ribo_nonribo(k)# nonribo와 ribo data 각각 1개씩의 data를 뽑음 
    
    centroids_old = np.zeros(centroids.shape)	# 제일 처음 centroids_old는 0으로 초기화 해줍니다
    labels=np.zeros(len(sum_data))# index에 어디 cluster에 포함되는지 적혀있다.
    #label에는 k=2일떄 0또는 1의 data가 저장되어서 어느 centroid그룹에 속해있는지 적혀있다.

    error = np.zeros(k)#에러는 centroids_old 와 centroid의 거리를 저장해서 모두 0이되면 멈춘다.
    error[0]=1
  

    while(error[0]!=0 or error[1]!=0 ):#각각 centroid와 거리를 계산해서 거리 짧은것 labeling 
        for i in range(len(sum_data)):
            distances = np.zeros(k)
            for j in range(k):           #distance index는 cluster index와 거리가 몇이지 적혀있따.
                distances[j] = distance(sum_data[i][0:80], centroids[j][0:80])
            labels[i]=np.argmin(distances)
            #print(labels[i])
    #centroid 업데이트 code 20~26
        centroids_old = deepcopy(centroids)

        for i in range(k): 
            points = [ sum_data[j] for j in range(len(sum_data)) if labels[j] == i ]
            centroids[i] = np.mean(points, axis=0)
        for i in range(k):
            error[i] = distance(centroids_old[i], centroids[i])
    #값 return 

    
    print("K=2")
    print("RIBO genes: gene number 0 to 120")
    print("NONRIBO genes: gene number 121 to 2466")
    sum_ribo_each_cluster=[]   

    for i in range(k):
        print()
        sum_total_each_cluster=[sum_data[j] for j in range(len(sum_data)) if round(labels[j]) == i]       
        print("Cluster ",i,"의 total number of genes: ",len(sum_total_each_cluster),"이다")
        sum_ribo_each_cluster=[sum_data[j] for j in range(len(sum_data)) if round(sum_data[j][79]) == 0 and labels[j]==i]   
        print("Cluster ",i,"의 ribodata number of genes: ",len(sum_ribo_each_cluster),"이다")   
    for i in range (k):
        print("\nCluster",i," :")
        count=1
        for j in range(len(sum_data)):
            if round(sum_data[j][79]) == 0 and labels[j]==i:
                print("index:",count,"Gene number= ",int(sum_data[j][80]))
                count+=1

def k_means_select_random(): #nonribo와 ribo data를 하나씩 뽑았을때의 k means 실행 
    #k=int(input("K값을 입력하세요 : "))
    k=2  
    centroids=random_selection(k)# 랜덤하게 2개의 점을 뽑음 
    
    centroids_old = np.zeros(centroids.shape)	# 제일 처음 centroids_old는 0으로 초기화 해줍니다
    labels=np.zeros(len(sum_data))# index에 어디 cluster에 포함되는지 적혀있다.
    #label에는 k=2일떄 0또는 1의 data가 저장되어서 어느 centroid그룹에 속해있는지 적혀있다.

    error = np.zeros(k)#에러는 centroids_old 와 centroid의 거리를 저장해서 모두 0이되면 멈춘다.
    error[0]=1
  

    while(error[0]!=0 or error[1]!=0 ):#각각 centroid와 거리를 계산해서 거리 짧은것 labeling 
        for i in range(len(sum_data)):
            distances = np.zeros(k)
            for j in range(k):           #distance index는 cluster index와 거리가 몇이지 적혀있따.
                distances[j] = distance(sum_data[i][0:80], centroids[j][0:80])
            labels[i]=np.argmin(distances)
            #print(labels[i])
    #centroid 업데이트 code 20~26
        centroids_old = deepcopy(centroids)

        for i in range(k): 
            points = [ sum_data[j] for j in range(len(sum_data)) if labels[j] == i ]
            centroids[i] = np.mean(points, axis=0)
        for i in range(k):
            error[i] = distance(centroids_old[i], centroids[i])
    #값 return 

    
    print("K=2")
    print("RIBO genes: gene number 0 to 120")
    print("NONRIBO genes: gene number 121 to 2466")
    sum_ribo_each_cluster=[]   

    for i in range(k):
        print()
        sum_total_each_cluster=[sum_data[j] for j in range(len(sum_data)) if round(labels[j]) == i]       
        print("Cluster ",i,"의 total number of genes: ",len(sum_total_each_cluster),"이다")
        sum_ribo_each_cluster=[sum_data[j] for j in range(len(sum_data)) if round(sum_data[j][79]) == 0 and labels[j]==i]   
        print("Cluster ",i,"의 ribodata number of genes: ",len(sum_ribo_each_cluster),"이다")   
    for i in range (k):
        print("\nCluster",i," :")
        count=1
        for j in range(len(sum_data)):
            if round(sum_data[j][79]) == 0 and labels[j]==i:
                print("index:",count,"Gene number= ",int(sum_data[j][80]))
                count+=1

print("nonribo와 ribo data를 하나씩 뽑았을때의 k means 함수 실행!!")
k_means_select_each()

#

print("\n----------------------------------------------------------------------")
print("random하게 data를 뽑아서 k means 실행 ")
k_means_select_random()

os.system("pause")